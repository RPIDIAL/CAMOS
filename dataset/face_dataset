import os
import sys
import torch
import random
import numpy as np
from torch.utils.data import Dataset
from batchgenerators.utilities.file_and_folder_operations import *

from mvp_data_utils import augment_cloud


## Indexes followed Mediapipe landmarks
Upper_midline=[151,9,8,168,6]
Upper_left=[337,336,285,417,351,412,465,464,357,413,453,452,451,450,449,448,343,350,277,329,349,348,347,346,345,441,442,443,444,
            445,342,446,261,295,282,283,276,353,265,340,296,334,293,300,383,372,299,333,298,301,368,264,447,251,389,356,454]
Upper_right=[108,107,55,193,122,188,245,244,128,189,233,232,231,230,229,228,114,121,47,100,120,119,118,117,116,221,222,223,224,225,
             113,226,31,65,52,53,46,124,35,111,66,105,63,70,156,143,69,104,68,71,139,34,227,21,162,127,234]
Lower_midline=[197,195,5,4,2,164,0,17,18,200,199,175,152,12,15]
Lower_left=[323,361,288,397,365,379,378,400,377,366,401,435,367,364,394,395,369,396,352,376,433,416,434,430,431,262,428,280,411,
            330,371,266,425,427,358,423,426,436,432,422,424,418,421,287,273,335,406,313,405,327,326,393,391,322,410,269,419,248,
            281,275,399,456,363,440,437,420,360,344,355,429,291,271,403,279]
Lower_right=[93,132,58,172,136,150,149,176,148,137,177,215,138,135,169,170,140,171,123,147,213,192,214,210,211,32,208,50,187,101,
             142,36,205,207,129,203,206,216,212,202,204,194,201,57,43,106,182,83,181,98,97,167,165,92,186,39,196,3,51,45,174,236,
             134,220,217,198,131,115,126,209,61,41,179,49]

upper_idx = Upper_midline+Upper_left+Upper_right
lower_idx = Lower_midline+Lower_left+Lower_right

class FaceDataset(Dataset):
    def __init__(self, pid, augmentation=None, sym=True):
        self.pid = pid
        self.augmentation = augmentation
        self.sym=sym

    def __len__(self):
        return len(self.pid)

    def __getitem__(self, idx):
        js_path=self.pid[idx]

        if self.sym==False:
            pass

        elif self.sym==True:
            json_path=js_path+'/preprocessed.json'
            js=load_json(json_path)

            result={}
            result['complete'] = np.array(js['complete_sym'])
            #result['complete_normal'] = torch.tensor(js['complete_normal_sym'])

        if 'part6' in js_path:
            rd_key = random.choice([key for key in js['facial_expression'].keys() if 'normal' not in key])
            result['cond'] = np.array(js['facial_expression'][rd_key])
            #result['cond_normal'] = torch.tensor(js['facial_expression'][rd_key+'_normal'])
        else:
            result['cond'] = np.array(js['cond'])


        if self.augmentation is not None:

            if isinstance(self.augmentation, dict):
                result_list = list(result.values())
                result_list = augment_cloud(result_list, self.augmentation, return_augmentation_params=False)
                for idx, key in enumerate(result.keys()):
                    result[key] = result_list[idx]


        result['x_mean']=js['x_mean']
        result['y_mean']=js['y_mean']
        result['z_mean']=js['z_mean']
        result['all_std']=js['all_std']
        result['pid']=js['pid']


        return result
